# -*- coding: utf-8 -*-
"""Node2Vec_Graph_Creation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Koh6EcAbBWNRLbG4queuavvo6TCHM1A1
"""

import re
from collections import defaultdict

input_file_path = '/content/drive/MyDrive/train.txt'
output_file_path = 'adjacency_list.txt'
metadata_file_path = 'metadata.txt'

adjacency_list = defaultdict(int)
speaker_id_map = {}
speaker_id_counter = 0
edge_weights = {"positive": 5, "neutral": 1, "negative": 0}

with open(input_file_path, 'r') as file:
    previous_speaker = None
    conversation_id = 0

    for line in file:
        line = line.strip()

        if not line:
            previous_speaker = None
            conversation_id += 1
            continue

        try:
            speaker, _, _, sentiment = re.split(r'\t+', line)
        except ValueError:
            print(f"Skipping line with unexpected format: {line}")
            continue

        if speaker not in speaker_id_map:
            speaker_id_map[speaker] = speaker_id_counter
            speaker_id_counter += 1

        current_speaker_id = speaker_id_map[speaker]

        if previous_speaker is not None:
            previous_speaker_id = speaker_id_map[previous_speaker]
            if current_speaker_id < previous_speaker_id:
                edge = (current_speaker_id, previous_speaker_id)
            else:
                edge = (previous_speaker_id, current_speaker_id)
            adjacency_list[edge] += edge_weights.get(sentiment.lower(), 0)

        previous_speaker = speaker

with open(output_file_path, 'w') as f:
    for (node1, node2), weight in adjacency_list.items():
        f.write(f"{node1} {node2} {weight}\n")

with open(metadata_file_path, 'w') as f:
    for speaker, speaker_id in speaker_id_map.items():
        f.write(f"{speaker_id} {speaker}\n")

print(f"Adjacency list written to {output_file_path} with summed weights.")
print(f"Metadata file written to {metadata_file_path} with speaker-to-ID mapping.")

